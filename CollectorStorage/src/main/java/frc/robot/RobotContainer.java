// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.CollectorConstants;
import frc.robot.Constants.StorageConstants;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Button;
import edu.wpi.first.wpilibj2.command.ConditionalCommand;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.StartEndCommand;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    
/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
    private final Button[] XboxButtons;//operatorButtons
    //private final JoystickButton[] xboxButtons; 
    private final JoystickButton[] joystickButtons0;
    private final JoystickButton[] joystickButtons1;
    private final Joystick joystick0;
    private final Joystick joystick1;
    private final XboxController xboxController;
  

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Storage m_storage = new Storage();
    public final Collector m_collector = new Collector();

// Joysticks

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
  this.joystick0 = new Joystick(0);
  this.joystick1 = new Joystick(1);
  this.xboxController = new XboxController(2);
  this.joystickButtons0 = new JoystickButton[13];
  this.joystickButtons1 = new JoystickButton[13];
  this.XboxButtons = new Button[17];//operatorButtons
  //this.xboxButtons = new JoystickButton[10];
  for(int i = 1; i <= joystickButtons0.length; i++) {
      joystickButtons0[i-1] = new JoystickButton(joystick0, i);
      joystickButtons1[i-1] = new JoystickButton(joystick1, i);
  }
  for(int i = 1; i <= XboxButtons.length; i++){
    XboxButtons[i-1] = new JoystickButton(xboxController, i);
  }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    
    //Change Colletor state
    XboxButtons[0].whenPressed(new InstantCommand(() -> m_collector.toggleCollectorState()));
    
    //intake
      joystickButtons1[1].toggleWhenPressed(
        new ConditionalCommand(
          new SequentialCommandGroup(
            new InstantCommand(() -> m_collector.setCollectorPower(CollectorConstants.COLLECTOR_DEFUALT_SPEED)),
            new sortStorage(m_storage)), 
          new ParallelCommandGroup(
            new InstantCommand(() -> m_collector.retractCollectorPiston()),
            new InstantCommand(() -> m_storage.setStoragePower(0))),
          joystickButtons1[1] :: get));
              
    //outtake
    joystickButtons1[2].whenHeld(
      new ParallelCommandGroup(
        new InstantCommand(() -> m_collector.setCollectorPower(CollectorConstants.OUTTAKE_POWER)),
        new InstantCommand(() -> m_storage.setStoragePower(StorageConstants.OUTTAKE_POWER))
      )
    );
    joystickButtons1[2].whenReleased(
      new ParallelCommandGroup(
        new InstantCommand(() -> m_collector.setCollectorPower(0)),
        new InstantCommand(() -> m_storage.setStoragePower(0))
      )
    );

  }


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  


  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

