// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants.CollectorConstants;
import static frc.robot.Constants.*; 
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
    public class Collector extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX collector5;
    private Solenoid collectorPiston;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean retracted;
    private NetworkTableEntry getCollectorState;
    private NetworkTableEntry setCollectorSpeed;
    
    /**
    *
    */
    public Collector()  {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    collector5 = new WPI_TalonSRX(CollectorConstants.COLLECTOR_MOTOR_ID);
 
 

    collectorPiston = new Solenoid(CollectorConstants.PEUNAMATICS_HUB_CAN_ID, PneumaticsModuleType.REVPH, CollectorConstants.COLLECTOR_SOLENOID_CHANNEL);
    addChild("Collector Piston", collectorPiston);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    this.getCollectorState = Shuffleboard.getTab("Collector")
        .add("collector sate", false)
        .getEntry();
    this.setCollectorSpeed = Shuffleboard.getTab("Collector")
        .add("Collector speed", 0.0)
        .withWidget(BuiltInWidgets.kNumberSlider)
        .getEntry();
    Shuffleboard.getTab("Collector").add("deployCollector",  new InstantCommand(this :: deployCollectorPiston, this));
    Shuffleboard.getTab("Collector").add("retractCollector",  new InstantCommand(this :: retractCollectorPiston, this));
    // Shuffleboard.getTab("Collector").add("toggleCollectorState", new InstantCommand(this::toggleCollectorState, this));
    }
    

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        this.getCollectorState.setBoolean(this.getCollectorState());
        if(TUNING){
        double collectorPower = this.setCollectorSpeed.getDouble(0.0);
        this.setCollectorPower(collectorPower);
        }

    }

    // public void setCollectorPower(double power){
    //     this.collector5.set(ControlMode.PercentOutput, power);
    //     if(power != 0){
    //         this.collectorPiston.set(true);
    //     }
    //     else {
    //         this.collectorPiston.set(false);
    //     }
        
    // }

    public void setCollectorPower(double power) { 
        this.collector5.set(ControlMode.PercentOutput, power);
    }

    public void disableCollector() {
        this.collector5.set(ControlMode.PercentOutput, 0);
        this.collectorPiston.set(false);
    }

    public void enableCollector(){
        this.collector5.set(ControlMode.PercentOutput, CollectorConstants.COLLECTOR_DEFUALT_SPEED);
        this.collectorPiston.set(true);
    }

    // public void toggleCollectorState(){
    //     if(this.collectorPiston.get()){
    //         this.collectorPiston.set(false);
    //         this.collector5.set(ControlMode.PercentOutput, 0);
    //     }
    //     else{
    //         this.collectorPiston.set(true);
    //         this.collector5.set(ControlMode.PercentOutput,CollectorConstants.COLLECTOR_DEFUALT_SPEED);
    //     }
    // }

    public void deployCollectorPiston(){
       this.collectorPiston.set(true);
    }

    public void retractCollectorPiston(){
        this.collectorPiston.set(false);
        this.collector5.set(ControlMode.PercentOutput, 0);
    }

    public boolean getCollectorState(){
        return this.collectorPiston.get();
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

   

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

