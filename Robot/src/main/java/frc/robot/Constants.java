// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.math.trajectory.TrapezoidProfile;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide
 * numerical or boolean constants. This class should not be used for any other
 * purpose. All constants should be declared globally (i.e. public static). Do
 * not put anything functional in this class.
 *
 * <p>
 * It is advised to statically import this class (or one of its inner classes)
 * wherever the constants are needed, to reduce verbosity.
 */

public final class Constants {
  
  public static final boolean TUNING = false; 

  /* DRIVETRAIN CONSTANTS */

  public static final class DrivetrainConstants {

    public static final int FRONT_LEFT_MODULE_DRIVE_MOTOR = 16;
    public static final int FRONT_LEFT_MODULE_STEER_MOTOR = 15;
    public static final int FRONT_LEFT_MODULE_STEER_ENCODER = 17;
    public static final double FRONT_LEFT_MODULE_STEER_OFFSET = -Math.toRadians(149.589843);
    // 329.58984375
    public static final int FRONT_RIGHT_MODULE_DRIVE_MOTOR = 10;
    public static final int FRONT_RIGHT_MODULE_STEER_MOTOR = 9;
    public static final int FRONT_RIGHT_MODULE_STEER_ENCODER = 11;
    public static final double FRONT_RIGHT_MODULE_STEER_OFFSET = -Math.toRadians(172.96875);
    // 352.96875
    public static final int BACK_LEFT_MODULE_DRIVE_MOTOR = 13;
    public static final int BACK_LEFT_MODULE_STEER_MOTOR = 12;
    public static final int BACK_LEFT_MODULE_STEER_ENCODER = 14;
    public static final double BACK_LEFT_MODULE_STEER_OFFSET = -Math.toRadians(103.27148);
    // 283.271484375
    public static final int BACK_RIGHT_MODULE_DRIVE_MOTOR = 7;
    public static final int BACK_RIGHT_MODULE_STEER_MOTOR = 6;
    public static final int BACK_RIGHT_MODULE_STEER_ENCODER = 8;
    public static final double BACK_RIGHT_MODULE_STEER_OFFSET = -Math.toRadians(117.333984);
    //297.333984375

    /**
     * The left-to-right distance between the drivetrain wheels
     *
     * Should be measured from center to center.
     */
    public static final double TRACKWIDTH_METERS = 0.5715; // 22.5 inches;
    /**
     * The front-to-back distance between the drivetrain wheels.
     *
     * Should be measured from center to center.
     */
    public static final double WHEELBASE_METERS = 0.5969;// 23.5 inches

    public static final int PIGEON_ID = 18;
  }

  public static final class CollectorConstants{
      public static final double OUTTAKE_POWER = -0.7;//FIX_ME
      public static final int COLLECTOR_MOTOR_ID = 5;
      public static final int PEUNAMATICS_HUB_CAN_ID = 20; 
      public static final int COLLECTOR_SOLENOID_CHANNEL = 1;
      public static final double COLLECTOR_DEFUALT_SPEED = 0.7; //FIX_ME change this to desired speed

  }
  
    public static final class AutoConstants {

      // from sysId tool
      public static final double ksVolts = 0.55493;
      public static final double kvVoltSecondsPerMeter = 2.3014;
      public static final double kaVoltSecondsSquaredPerMeter = 0.12872;

      public static final double kMaxSpeedMetersPerSecond = 3;
      public static final double kMaxAccelerationMetersPerSecondSquared = 3;
      public static final double kMaxAngularSpeedRadiansPerSecond = Math.PI;
      public static final double kMaxAngularSpeedRadiansPerSecondSquared = Math.PI;
  
      public static final double kPXController = 2.2956;    // from sysId tool
      public static final double kPYController = 2.2956;    // from sysId tool
      public static final double kPThetaController = 4.9;     // tune after verifying non-holonomic motion
  
      // Constraint for the motion profilied robot angle controller
      public static final TrapezoidProfile.Constraints kThetaControllerConstraints =
          new TrapezoidProfile.Constraints(
              kMaxAngularSpeedRadiansPerSecond, kMaxAngularSpeedRadiansPerSecondSquared);
    }

    public static class FlywheelConstants {
      public static final int SLOT_INDEX = 0;
      public static final int PID_LOOP_INDEX = 0;
      public static final int TIMEOUT_MS = 30;
      public static final int VELOCITY_TOLERANCE = 500; //FIX_ME tune this should be how off our velocity can be 
      public static final int LEFT_FLYWHEELMOTOR_CANID = 1;
      public static final int RIGHT_FLYWHEELMOTOR_CANID = 2;
      public final static Gains GAINS_VELOCITY  = new Gains(0.5 /* kP */,  0 /* kI */,   0  /* kD */,  .0438   /* kF */,     0  /* kIzone */,  1.00 /* kPeakOutput */);
      public final static int MAX_FLYWHEEL_VELOCITY = 17500;
      public static final int WALL_SHOT_VELOCITY = 8000; // FIX_ME tune this
      public static final int FENDER_SHOT_VELOCITY = 9000; // FIX_ME tune this

 }
 public static class HoodConstants{
     public static final int HOOD_MOTOR_ID = 3;
     public static final double KP = 0; //FIX_ME find hood pid p value 
     public static final double KI =0;
     public static final double KD =0;
     public static final double KIz =0;
     public static final double KFF =0;
      public static final double K_MAX_OUTPUT=1;
      public static final double K_MIN_OUTPUT=-1;
      public static final int TIMEOUT_MS = 30;
      
      public static final int PID_SLOT = 0;
      public static final double ARBITRARY_FEED_FORWARD_UP_IN_PERCENT = 0.4;   // FIX_ME find arbitrary feed foward for hood
      public static final double ARBITRARY_FEED_FORWARD_DOWN_IN_PERCENT = -0.2;
      
      public static final double FENDER_ANGLE_POSITION = .2;   // FIX_ME udpate once the value is known
      public static final double WALL_ANGLE_POSITION = 1.0147;    // FIX_ME udpate once the value is known
      public static final double HOOD_DEGREES_TO_HOOD_ENCODER=0; // encodervalue/degrees ratio
      public static final double POSITION_TOLERANCE = .1;

 }

 public static class LimelightConstants {
     public static final double HUB_H = 104;
     public static final double ROBOT_H = 21.25;
     public static final double GRAV_CONST_FT = -32.17519788;
     public static final double Flywheel_Radius_IN = 2;
     public static final double Velocity_Multiplier = 2;
     public static final double Ticks_Per_One_Rotation = 2048;
     public static final int LIMELIGHT_ANGLE_OFFSET=-2;
     public static final int D2_D1_OFFSET_IN = 24;
     public static final int H2_H1_OFFSET_IN = -24;
     

 }


  public static final class StorageConstants{
      public static final double OUTTAKE_POWER = -.8;
      public static final int SHOOTER_SENSOR = 1;
      public static final int COLLECTOR_SENSOR = 0;
      public static final int STORAGE_MOTOR_ID = 4;
      public static final double STORAGE_DEFAULT_SPEED = 0.8; 
  }

    public static final class JoystickConstants {
      public static final int CLIMBER_UP = 2;
      public static final int CLIMB_2 = 1;
      public static final int CLIMB_3 = 7;
      public static final int CLIMB_4 = 6;
      public static final int FENDER = 9; 
      public static final int FIELD_WALL = 6;
      public static final int LAUNCHPAD = 5;
      public static final int TARMAC = 4;
      public static final int SHOOT = 3; 
      public static final int SHOOT_SLOW = 10;
      public static final int UNASSIGNED = 11;
      public static final int CLIMB_CAM = 12;

      public static final int BUTTON_A = 1;
      public static final int BUTTON_B = 2;
      public static final int BUTTON_X = 3;
      public static final int BUTTON_Y = 4;
      public static final int BUTTON_LB = 5; 
      public static final int BUTTON_RB = 6;
      public static final int BUTTON_BACK = 7;
      public static final int BUTTON_START = 8;
      public static final int LEFT_JOYSTICK_BUTTON = 9;
      public static final int RIGHT_JOYSTICK_BUTTON = 10;
      
    }
}
