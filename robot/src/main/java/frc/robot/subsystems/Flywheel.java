// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.networktables.NetworkTableEntry;

import static frc.robot.Constants.*;
import static frc.robot.Constants.FlywheelConstants.*;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import java.util.Map;

import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Flywheel extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX leftFlywheelMotor;
    private WPI_TalonFX rightFlywheelMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double velocitySetPoint;
    private LimelightMath limelight;

    private NetworkTableEntry velocitySetPointNT;
    private NetworkTableEntry motorPowerNT;
    private NetworkTableEntry FConstantNT;
    private NetworkTableEntry PConstantNT;
    private NetworkTableEntry IConstantNT;
    private NetworkTableEntry DConstantNT;


    /**
    *
    */
    public Flywheel() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFlywheelMotor = new WPI_TalonFX(LEFT_FLYWHEELMOTOR_CANID);
        rightFlywheelMotor = new WPI_TalonFX(RIGHT_FLYWHEELMOTOR_CANID);

        this.limelight = new LimelightMath();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUC;TORS

        
        /* Factory Default all hardware to prevent unexpected behaviour */
        rightFlywheelMotor.configFactoryDefault();
        leftFlywheelMotor.configFactoryDefault();

        /** Invert Directions for Left and Right */
        TalonFXInvertType _leftInvert = TalonFXInvertType.Clockwise; //Same as invert = "true"
        TalonFXInvertType _rightInvert = TalonFXInvertType.CounterClockwise; //Same as invert = "false"

        /* Config sensor used for Primary PID [Velocity] */
        TalonFXConfiguration _leftConfig = new TalonFXConfiguration();
        TalonFXConfiguration _rightConfig = new TalonFXConfiguration();

        /* Disable all motors */
        this.rightFlywheelMotor.set(TalonFXControlMode.PercentOutput, 0);
        this.leftFlywheelMotor.set(TalonFXControlMode.PercentOutput,  0);
        
        /* Set neutral modes */
        this.leftFlywheelMotor.setNeutralMode(NeutralMode.Coast);
        this.rightFlywheelMotor.setNeutralMode(NeutralMode.Coast);

        /* Configure output */
        this.leftFlywheelMotor.setInverted(TalonFXInvertType.Clockwise);
        this.rightFlywheelMotor.setInverted(TalonFXInvertType.CounterClockwise);

        /*
            * Talon FX does not need sensor phase set for its integrated sensor
            * This is because it will always be correct if the selected feedback device is integrated sensor (default value)
            * and the user calls getSelectedSensor* to get the sensor's position/velocity.
            * 
            * https://phoenix-documentation.readthedocs.io/en/latest/ch14_MCSensor.html#sensor-phase
            */
        // this.leftFlywheelMotor.setSensorPhase(true);
        // this.rightFlywheelMotor.setSensorPhase(true);

        
        /** Feedback Sensor Configuration */

		/** Distance Configs */

		/* Configure the left Talon's selected sensor as integrated sensor */
		_leftConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); //Local Feedback Source
        
        /* Configure the Remote (Left) Talon's selected sensor as a remote sensor for the right Talon */
        _rightConfig.remoteFilter0.remoteSensorDeviceID = this.leftFlywheelMotor.getDeviceID(); //Device ID of Remote Source
        _rightConfig.remoteFilter0.remoteSensorSource = RemoteSensorSource.TalonFX_SelectedSensor; //Remote Source Type

        /* Now that the Left sensor can be used by the master Talon,
		 * set up the Left (Aux) and Right (Master) distance into a single
		 * flyweel velocity as the Master's Selected Sensor 0. */
		setVelocityConfigs(_rightInvert, _rightConfig);

		/* FPID for velocity */
        _rightConfig.slot0.kF = GAINS_VELOCITY.kF;
        _rightConfig.slot0.kP = GAINS_VELOCITY.kP;
        _rightConfig.slot0.kI = GAINS_VELOCITY.kI;
        _rightConfig.slot0.kD = GAINS_VELOCITY.kD;
        _rightConfig.slot0.integralZone = GAINS_VELOCITY.kIzone;
        _rightConfig.slot0.closedLoopPeakOutput = GAINS_VELOCITY.kPeakOutput;

        /* false means talon's local output is PID0 + PID1, and other side Talon is PID0 - PID1
		 *   This is typical when the master is the right Talon FX and using Pigeon
		 * 
		 * true means talon's local output is PID0 - PID1, and other side Talon is PID0 + PID1
		 *   This is typical when the master is the left Talon FX and using Pigeon
		 */
		_rightConfig.auxPIDPolarity = false;

        /* Config the neutral deadband. */
		_leftConfig.neutralDeadband = 0.001;
		_rightConfig.neutralDeadband = 0.001;

        /**
		 * 1ms per loop.  PID loop can be slowed down if need be.
		 * For example,
		 * - if sensor updates are too slow
		 * - sensor deltas are very small per update, so derivative error never gets large enough to be useful.
		 * - sensor movement is very slow causing the derivative error to be near zero.
		 */
		int closedLoopTimeMs = 1;
		_rightConfig.slot0.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot1.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot2.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot3.closedLoopPeriod = closedLoopTimeMs;

        /* APPLY the config settings */
        this.leftFlywheelMotor.configAllSettings(_leftConfig);
        this.rightFlywheelMotor.configAllSettings(_rightConfig);

        /* Set status frame periods to ensure we don't have stale data */
        this.rightFlywheelMotor.setStatusFramePeriod(StatusFrame.Status_12_Feedback1, 20, TIMEOUT_MS);
        this.rightFlywheelMotor.setStatusFramePeriod(StatusFrame.Status_13_Base_PIDF0, 20, TIMEOUT_MS);
        this.leftFlywheelMotor.setStatusFramePeriod(StatusFrame.Status_2_Feedback0, 5, TIMEOUT_MS);

        rightFlywheelMotor.selectProfileSlot(SLOT_INDEX, PID_LOOP_INDEX);

        this.velocitySetPoint = 0.0;
        Shuffleboard.getTab("Shooter").addBoolean("FlywheelIsAtSetpoint", this::isAtSetpoint);
        Shuffleboard.getTab("Shooter").addNumber("FlywheelRightEncoderReading",
                this.rightFlywheelMotor::getSelectedSensorVelocity);
        Shuffleboard.getTab("Shooter").addNumber("FlywheelLeftEncoderReading",
                this.leftFlywheelMotor::getSelectedSensorVelocity);
        Shuffleboard.getTab("Shooter").addNumber("FlywheelRightClosedLoopError",
                this.rightFlywheelMotor::getClosedLoopError);
        Shuffleboard.getTab("Shooter").addNumber("FlywheelLeftClosedLoopError",
                this.leftFlywheelMotor::getClosedLoopError);

        // Shuffleboard.getTab("Shooter").add("SpinFlywheelForFenderCommand",
        // new SpinFlywheelCommand(this, FENDER_VELOCITY));
        // Shuffleboard.getTab("Shooter").add("StopFlywheelCommand", new
        // InstantCommand(this::stopFlywheel, this));

        // Each robot feature that requires PID tuniing has its own Shuffleboard tab for
        // tuning (i.e., "ShooterTuning")
        // Add indicators and controls to this Shuffleboard tab to assist with
        // interactively tuning the system.

        this.velocitySetPointNT = Shuffleboard.getTab("ShooterTuning")
                .add("VelocitySetpoint", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 25000)) // specify widget properties here
                .getEntry();

        this.motorPowerNT = Shuffleboard.getTab("ShooterTuning")
                .add("Flywheel Power", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.FConstantNT = Shuffleboard.getTab("ShooterTuning")
                .add("Flywheel F", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.PConstantNT = Shuffleboard.getTab("ShooterTuning")
                .add("Flywheel P", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.IConstantNT = Shuffleboard.getTab("ShooterTuning")
                .add("Flywheel I", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.DConstantNT = Shuffleboard.getTab("ShooterTuning")
                .add("Flywheel D", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        // the following code will only run when we are tuning the system (i.e., not
        // under normal robot operation)
        if (TUNING) {

            // when tuning, we first set motor power and check the resulting velocity
            // once we have determined our feedforward constant, comment the following lines
            // and uncomment the ones to tune the PID
            double motorPower = this.motorPowerNT.getDouble(0.0);
            leftFlywheelMotor.set(TalonFXControlMode.PercentOutput, motorPower);
            rightFlywheelMotor.set(TalonFXControlMode.PercentOutput, motorPower);

            // uncomment these lines after dtermining the feedforward
            // this.rightFlywheelMotor.config_kF(SLOT_INDEX, this.FConstantNT.getDouble(0.0),
            // TIMEOUT_MS);
            // this.rightFlywheelMotor.config_kP(SLOT_INDEX, this.PConstantNT.getDouble(0.0),
            // TIMEOUT_MS);
            // this.rightFlywheelMotor.config_kI(SLOT_INDEX, this.IConstantNT.getDouble(0.0),
            // TIMEOUT_MS);
            // this.rightFlywheelMotor.config_kD(SLOT_INDEX, this.DConstantNT.getDouble(0.0),
            // TIMEOUT_MS);

            // double targetVelocity = this.velocitySetPointNT.getDouble(0.0);
            // this.setVelocity(targetVelocity);
        }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double getVelocity() {
        return this.rightFlywheelMotor.getSelectedSensorVelocity(SLOT_INDEX);
    }

    public void setVelocity(double velocitySetPoint) {
        this.velocitySetPoint = velocitySetPoint;
        
        /* Configured for Velocity Closed Loop on Integrated Sensors' Sum */
		rightFlywheelMotor.set(TalonFXControlMode.Velocity, velocitySetPoint);
		leftFlywheelMotor.follow(rightFlywheelMotor);
    }

    public boolean isAtSetpoint() {
        return Math.abs(this.getVelocity() - this.velocitySetPoint) < VELOCITY_TOLERANCE;
    }

    public void stopFlywheel() {
        leftFlywheelMotor.set(TalonFXControlMode.PercentOutput, 0.0);
        rightFlywheelMotor.set(TalonFXControlMode.PercentOutput, 0.0);
    }

    public double getIdealLimelight() {
        return limelight.getIdealVelocity();
    }

    /** 
	 * Determines if SensorSum or SensorDiff should be used 
	 * for combining left/right sensors into flywheel velocity.  
	 * 
	 * Assumes Aux Position is set as Remote Sensor 0.  
	 * 
	 * configAllSettings must still be called on the master config
	 * after this function modifies the config values. 
	 * 
	 * @param masterInvertType Invert of the Master Talon
	 * @param masterConfig Configuration object to fill
	 */
	 void setVelocityConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig){
		/**
		 * Determine if we need a Sum or Difference.
		 * 
		 * The auxiliary Talon FX will always be positive
		 * in the forward direction because it's a selected sensor
		 * over the CAN bus.
		 * 
		 * The master's native integrated sensor may not always be positive when forward because
		 * sensor phase is only applied to *Selected Sensors*, not native
		 * sensor sources.  And we need the native to be combined with the 
		 * aux (other side's) distance into a single robot distance.
		 */

		/* THIS FUNCTION should not need to be modified. 
		   This setup will work regardless of whether the master
		   is on the Right or Left side since it only deals with
		   distance magnitude.  */

		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise){
			/* 
				If master is inverted, that means the integrated sensor
				will be negative in the forward direction.

				If master is inverted, the final sum/diff result will also be inverted.
				This is how Talon FX corrects the sensor phase when inverting 
				the motor direction.  This inversion applies to the *Selected Sensor*,
				not the native value.

				Will a sensor sum or difference give us a positive total magnitude?

				Remember the Master is one side of your drivetrain distance and 
				Auxiliary is the other side's distance.

					Phase | Term 0   |   Term 1  | Result
				Sum:  -((-)Master + (+)Aux   )| NOT OK, will cancel each other out
				Diff: -((-)Master - (+)Aux   )| OK - This is what we want, magnitude will be correct and positive.
				Diff: -((+)Aux    - (-)Master)| NOT OK, magnitude will be correct but negative
			*/

			masterConfig.diff0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); //Local Integrated Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice();   //Aux Selected Sensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference.toFeedbackDevice(); //Diff0 - Diff1
		} else {
			/* Master is not inverted, both sides are positive so we can sum them. */
			masterConfig.sum0Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice();    //Aux Selected Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); //Local IntegratedSensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); //Sum0 + Sum1
		}

		/* Since the velocity is the sum of the two sides, divide by 2 so the total isn't double
		   the real-world value */
		masterConfig.primaryPID.selectedFeedbackCoefficient = 0.5;
	 }

}
