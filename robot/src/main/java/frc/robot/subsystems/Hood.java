// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants.HoodConstants;

import frc.robot.LimelightMath;
import frc.robot.commands.*;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxPIDController;


import java.util.Map;
import java.util.function.DoubleSupplier;

//import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hood extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax hoodMotor;
    private SparkMaxPIDController m_pidController;
    private NetworkTableEntry FConstantHoodNT; 
    private NetworkTableEntry PConstantHoodNT; 
    private NetworkTableEntry IConstantHoodNT; 
    private NetworkTableEntry DConstantHoodNT; 
    private NetworkTableEntry rotationsNT;
    private RelativeEncoder hoodEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
    /**
    *
    */
    public Hood() {
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    hoodMotor = new CANSparkMax(3, MotorType.kBrushless);
    m_pidController = hoodMotor.getPIDController();
    hoodEncoder = hoodMotor.getEncoder(); 

    m_pidController.setP(HoodConstants.KP);
    m_pidController.setI(HoodConstants.KI);
    m_pidController.setD(HoodConstants.KD);
    //m_pidController.setIZone(HoodConstants.kIz);
    m_pidController.setFF(HoodConstants.KFF);
    m_pidController.setOutputRange(HoodConstants.K_MIN_OUTPUT, HoodConstants.K_MAX_OUTPUT);


        this.FConstantHoodNT = Shuffleboard.getTab("HoodTuning")
                .add("Flywheel F", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.PConstantHoodNT = Shuffleboard.getTab("HoodTuning")
                .add("Flywheel P", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.IConstantHoodNT = Shuffleboard.getTab("HoodTuning")
                .add("Flywheel I", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();

        this.DConstantHoodNT = Shuffleboard.getTab("HoodTuning")
                .add("Flywheel D", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.rotationsNT = Shuffleboard.getTab("HoodTuning")
                .add("roations", 0.0)
                .getEntry();
 
        Shuffleboard.getTab("Hood").addNumber("HoodEncoderReading", this::hoodRelativeEncoderPosition);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {

        if (HoodConstants.TUNING) {

            // when tuning, we first set motor power and check the resulting velocity
            // once we have determined our feedforward constant, comment the following lines
            double rotations = this.rotationsNT.getDouble(0.0);
            m_pidController.setReference(rotations, CANSparkMax.ControlType.kPosition);
            // and uncomment the ones to tune the PID
            // m_pidController.setP(HoodConstants.kP);
            // m_pidController.setI(HoodConstants.kI);
            // m_pidController.setD(HoodConstants.kD);
            // //m_pidController.setIZone(HoodConstants.kIz);
            // m_pidController.setFF(HoodConstants.kFF);
            // m_pidController.setOutputRange(HoodConstants.kMinOutput, HoodConstants.kMaxOutput);
            
            
        }
       


        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double getHoodEncoderValue() {
        return hoodMotor.getEncoder().getPosition();
    }

    //FIXME
    public double getHoodSetpointLimeLight() {
        
        return 0.0;
    }

    public void setHoodMotorPower(double pwr) {
        this.hoodMotor.set(pwr);
    }

    public void setHoodSetpoint(double rotations){
        m_pidController.setReference(rotations, CANSparkMax.ControlType.kPosition);
    }

    public double hoodRelativeEncoderPosition(){
        return hoodEncoder.getPosition();
    }
}

