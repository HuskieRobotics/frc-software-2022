// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import static frc.robot.Constants.*;
import static frc.robot.Constants.HoodConstants.*;

import edu.wpi.first.networktables.EntryListenerFlags;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.command.InstantCommand;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.commands.SetHoodPositionCommand;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.IdleMode;

import java.util.Map;

//import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hood extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax hoodMotor;
    private SparkMaxPIDController m_pidController;
    private NetworkTableEntry motorPowerNT;
    private NetworkTableEntry FConstantHoodNT; 
    private NetworkTableEntry PConstantHoodNT; 
    private NetworkTableEntry IConstantHoodNT; 
    private NetworkTableEntry DConstantHoodNT; 
    private NetworkTableEntry setRotationsNT;
    private RelativeEncoder hoodEncoder;
    private double positionSetpoint;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
    /**
    *
    */
    public Hood() {
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    hoodMotor = new CANSparkMax(HOOD_MOTOR_ID, MotorType.kBrushless);

    /**
     * The restoreFactoryDefaults method can be used to reset the configuration parameters
     * in the SPARK MAX to their factory default state. If no argument is passed, these
     * parameters will not persist between power cycles
     */
    hoodMotor.restoreFactoryDefaults();
    hoodMotor.setIdleMode(IdleMode.kBrake);


    /**
     * In order to use PID functionality for a controller, a SparkMaxPIDController object
     * is constructed by calling the getPIDController() method on an existing
     * CANSparkMax object
     */
    m_pidController = hoodMotor.getPIDController();

    // Encoder object created to display position values
    hoodEncoder = hoodMotor.getEncoder(); 
    hoodEncoder.setPosition(0.0);

    m_pidController.setP(KP);
    m_pidController.setI(KI);
    m_pidController.setD(KD);
    m_pidController.setIZone(KIz);
    m_pidController.setFF(KFF);
    m_pidController.setOutputRange(K_MIN_OUTPUT, K_MAX_OUTPUT);
    
    if (TUNING) {
        this.motorPowerNT = Shuffleboard.getTab("Hood")
                .add("motor power", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", -1.0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.motorPowerNT.addListener(event -> {
                    this.setHoodMotorPower(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);
                
        this.FConstantHoodNT = Shuffleboard.getTab("Hood")
                .add("kF", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.FConstantHoodNT.addListener(event -> {
                    this.m_pidController.setFF(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);

        this.PConstantHoodNT = Shuffleboard.getTab("Hood")
                .add("kP", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.PConstantHoodNT.addListener(event -> {
                    this.m_pidController.setP(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);

        this.IConstantHoodNT = Shuffleboard.getTab("Hood")
                .add("kI", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.IConstantHoodNT.addListener(event -> {
                    this.m_pidController.setI(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);

        this.DConstantHoodNT = Shuffleboard.getTab("Hood")
                .add("kD", 0.0)
                .withWidget(BuiltInWidgets.kNumberSlider)
                .withProperties(Map.of("min", 0, "max", 1.0)) // specify widget properties here
                .getEntry();
        this.DConstantHoodNT.addListener(event -> {
                    this.m_pidController.setD(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);

        this.setRotationsNT = Shuffleboard.getTab("Hood")
                .add("setRotations", 0.0)
                .getEntry();
        this.setRotationsNT.addListener(event -> {
                    this.setHoodSetpoint(event.getEntry().getValue().getDouble());
                }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);
    }

        Shuffleboard.getTab("Hood").addNumber("HoodEncoderReading", this::getHoodEncoderPosition);
        //Shuffleboard.getTab("Hood").addNumber("HoodLimelightRotations", this::getHoodSetpointLimeLight);
        Shuffleboard.getTab("Hood").addBoolean("IsAtSetpoint", this::isAtSetpoint);
        Shuffleboard.getTab("Hood").addNumber("Current Setpoint", this::getPositionSetpoint);
        Shuffleboard.getTab("Hood").addNumber("Hood Motor Power", hoodMotor::get);

        Shuffleboard.getTab("Hood").add("Aim for Fender", new  SetHoodPositionCommand(this, FENDER_ANGLE_POSITION));
        Shuffleboard.getTab("Hood").add("Aim for Wall", new  SetHoodPositionCommand(this, WALL_ANGLE_POSITION));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double getHoodEncoderPosition() {
        return hoodEncoder.getPosition();
    }

    
    // public double getHoodSetpointLimeLight() {
        
    //     double a = lm.getIdealHoodA();
    //     return a * HOOD_DEGREES_TO_HOOD_ENCODER; //will this return rotations?
    // }

    public void setHoodMotorPower(double pwr) {
        this.hoodMotor.set(pwr);
    }

    public void aimForFender() {
        this.setHoodSetpoint(FENDER_ANGLE_POSITION);
    }

    public void aimForWall() {
        this.setHoodSetpoint(WALL_ANGLE_POSITION);
    }

    public void setHoodSetpoint(double rotations){

        /**
         * PIDController objects are commanded to a set point using the 
         * SetReference() method.
         * 
         * The first parameter is the value of the set point, whose units vary
         * depending on the control type set in the second parameter.
         * 
         * The second parameter is the control type can be set to one of four 
         * parameters:
         *  com.revrobotics.CANSparkMax.ControlType.kDutyCycle
         *  com.revrobotics.CANSparkMax.ControlType.kPosition
         *  com.revrobotics.CANSparkMax.ControlType.kVelocity
         *  com.revrobotics.CANSparkMax.ControlType.kVoltage
         */
        positionSetpoint = rotations;
        if (rotations > getHoodEncoderPosition()) {
            m_pidController.setReference(rotations, CANSparkMax.ControlType.kPosition, PID_SLOT, ARBITRARY_FEED_FORWARD_UP_IN_PERCENT, SparkMaxPIDController.ArbFFUnits.kPercentOut);
        }
        else {
            m_pidController.setReference(rotations, CANSparkMax.ControlType.kPosition, PID_SLOT, ARBITRARY_FEED_FORWARD_DOWN_IN_PERCENT, SparkMaxPIDController.ArbFFUnits.kPercentOut);
        }
    }

    public boolean isAtSetpoint() {
        return Math.abs(this.getHoodEncoderPosition() - this.positionSetpoint) < POSITION_TOLERANCE;
    }

    public double getPositionSetpoint() {
        return this.positionSetpoint;
    }

}

