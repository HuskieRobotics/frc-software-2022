// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.shuffleboard.EventImportance;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private final Joystick controlBox;
  private final JoystickButton[] controlBoxButtons;
  

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Feeder m_feeder = new Feeder();
    public final Hood m_hood = new Hood();
    public final Flywheel m_flywheel = new Flywheel();

// Joysticks

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public final Drivetrain m_drivetrain = new Drivetrain();

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {

    // Set the scheduler to log Shuffleboard events for command initialize, interrupt, finish
    CommandScheduler.getInstance().onCommandInitialize(
        command -> Shuffleboard.addEventMarker("Command initialized",
            command.getClass().getName().substring(command.getClass().getName().lastIndexOf('.') + 1),
            EventImportance.kNormal));      
    
    CommandScheduler.getInstance().onCommandInterrupt(
        command -> Shuffleboard.addEventMarker("Command interrupted",
            command.getClass().getName().substring(command.getClass().getName().lastIndexOf('.') + 1),
            EventImportance.kNormal));      
    
    CommandScheduler.getInstance().onCommandFinish(
        command -> Shuffleboard.addEventMarker("Command finished",
            command.getClass().getName().substring(command.getClass().getName().lastIndexOf('.') + 1),
            EventImportance.kNormal));      
    
            
    this.controlBox = new Joystick(3);
    this.controlBoxButtons = new JoystickButton[13];
    for(int i = 1; i <= this.controlBoxButtons.length; i++) {
      controlBoxButtons[i-1] = new JoystickButton(this.controlBox, i);
    }

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    controlBoxButtons[0].whileHeld(
        new SequentialCommandGroup(
            new ParallelCommandGroup(
                new SpinFlywheelCommand(m_flywheel, Constants.FlywheelConstants.FENDER_VELOCITY),
                new InstantCommand(m_drivetrain::assumeXStance, m_drivetrain),
                new MoveHoodCommand(m_hood, Constants.HoodConstants.FENDER_POSITION)),
            new TransferCargoToShooterCommand(m_feeder),
            new ParallelCommandGroup(
                new SpinFlywheelCommand(m_flywheel, Constants.FlywheelConstants.FENDER_VELOCITY),
                new AdvanceCargoCommand(m_feeder)),
            new TransferCargoToShooterCommand(m_feeder)
        ));
    controlBoxButtons[0].whenReleased(new InstantCommand(m_flywheel::stopFlywheel, m_flywheel));

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

