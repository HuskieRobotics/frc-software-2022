// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;


import frc.robot.commands.SetHoodtoSetPoint;
import frc.robot.commands.SetShooterVelocity;

//import edu.wpi.first.wpilibj.command.InstantCommand;

import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
  private final Joystick joystick0;
  private final Joystick joystick1;
  private final JoystickButton[] joystickButtons0;
  private final JoystickButton[] joystickButtons1;

 

  private static RobotContainer m_robotContainer = new RobotContainer();

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private final shooter m_shooter = new shooter();




// Joysticks

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    this.joystick0 = new Joystick(0);
    this.joystick1 = new Joystick(1);
    this.joystickButtons0 = new JoystickButton[13];
    this.joystickButtons1 = new JoystickButton[13];
    for(int i = 1; i <= joystickButtons0.length; i++) {
        joystickButtons0[i-1] = new JoystickButton(joystick0, i);
        joystickButtons1[i-1] = new JoystickButton(joystick1, i);
  //Change distnace to ty values anc change velocity to tested velocity powers
  m_shooter.addShooterVeloMap(1, 1);
  m_shooter.addShooterVeloMap(2, 1);
  m_shooter.addShooterVeloMap(3, 1);
  m_shooter.addShooterVeloMap(4, 1);
  m_shooter.addShooterVeloMap(5, 1);
  m_shooter.addShooterVeloMap(6, 1);
  m_shooter.addShooterVeloMap(7, 1);
  m_shooter.addShooterVeloMap(8, 1);
  m_shooter.addShooterVeloMap(9, 1);
  m_shooter.addShooterVeloMap(10, 1);
  m_shooter.addShooterVeloMap(11, 1);
  m_shooter.addShooterVeloMap(12, 1);
  m_shooter.addShooterVeloMap(13, 1);
  m_shooter.addShooterVeloMap(14, 1);
  m_shooter.addShooterVeloMap(15, 1);
  m_shooter.addShooterVeloMap(16, 1);
  m_shooter.addShooterVeloMap(17, 1);
  m_shooter.addShooterVeloMap(18, 1);
  
  m_shooter.addHoodAngleMap(1, 20);
  m_shooter.addHoodAngleMap(2, 20);
  m_shooter.addHoodAngleMap(3, 20);
  m_shooter.addHoodAngleMap(4, 20);
  m_shooter.addHoodAngleMap(5, 20);
  m_shooter.addHoodAngleMap(6, 20);
  m_shooter.addHoodAngleMap(7, 20);
  m_shooter.addHoodAngleMap(8, 20);
  m_shooter.addHoodAngleMap(9, 20);
  m_shooter.addHoodAngleMap(10, 20);
  m_shooter.addHoodAngleMap(11, 20);
  m_shooter.addHoodAngleMap(12, 20);
  m_shooter.addHoodAngleMap(13, 20);
  m_shooter.addHoodAngleMap(14, 20);
  m_shooter.addHoodAngleMap(15, 20);
  m_shooter.addHoodAngleMap(16, 20);


        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
    }
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons

    joystickButtons0[1].whileHeld(new RunCommand(() -> m_shooter.setFlywheelVelo(.5)));
    joystickButtons0[2].whileHeld(new RunCommand(() -> m_shooter.setHoodMotorPower(.3)));
    joystickButtons0[3].whileHeld(new RunCommand(() -> m_shooter.setHoodMotorPower(-.3)));
    //gets data basedon current distance and hashMap
    joystickButtons0[4].whileHeld(new SequentialCommandGroup(new SetHoodtoSetPoint(m_shooter), new SetShooterVelocity(m_shooter)));
    //Preset Distances and angles test
    joystickButtons0[5].whileHeld(new RunCommand(() -> m_shooter.setShootVelocityandHoodAngle(.3, 90)));
    joystickButtons0[6].whileHeld(new RunCommand(() -> m_shooter.setShootVelocityandHoodAngle(.3, 90)));
    joystickButtons0[7].whileHeld(new RunCommand(() -> m_shooter.setShootVelocityandHoodAngle(.3, 90)));
    joystickButtons0[8].whileHeld(new RunCommand(() -> m_shooter.setShootVelocityandHoodAngle(.3, 90)));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

