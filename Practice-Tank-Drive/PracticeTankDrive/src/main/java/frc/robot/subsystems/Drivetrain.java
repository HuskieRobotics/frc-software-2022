// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.math.filter.SlewRateLimiter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX[] leftMotor;
    private WPI_TalonSRX[] rightMotor;
    private SlewRateLimiter filter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMotor = new WPI_TalonSRX[3];
        rightMotor = new WPI_TalonSRX[3];
        for (int i = 0; i < leftMotor.length; i++) {
            leftMotor[i] = new WPI_TalonSRX(Constants.leftMotorID[i]);//1,2,3
            rightMotor[i] = new WPI_TalonSRX(Constants.rightMotorID[i]);//4,5,6
      
            // sets talon's neutral mode to brake mode
            this.rightMotor[i].setNeutralMode(NeutralMode.Brake);
            this.rightMotor[i].setInverted(true); // inverts right motors
      
            this.leftMotor[i].setNeutralMode(NeutralMode.Brake);
        }
        
        filter = new SlewRateLimiter(0.5);
    
    }  
    
    

    public void arcadeDrive(double joystickX, double joystickY) {

        joystickX = filter.calculate(deadZone(joystickX));
        joystickY = filter.calculate(deadZone(joystickY));
            
        double leftMotorOutput = (joystickX + joystickY);
        double rightMotorOutput = (joystickY - joystickX);
        setPower(leftMotorOutput, rightMotorOutput);
        }
        
        

    public void setPower(double leftPower, double rightPower) {
        for (int i=0; i<leftMotor.length; i++) {
            leftMotor[i].set(ControlMode.PercentOutput, leftPower);
            rightMotor[i].set(ControlMode.PercentOutput, rightPower);
            }
        }
    public double deadZone(double joystickVal) {
        if (Math.abs(joystickVal) < 0.1){
            return 0.0; 
        }
        else{
            return joystickVal;
        }
          }

}

