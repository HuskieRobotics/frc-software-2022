// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.commands.ExtendClimberToMidRungCommand;
import frc.commands.ReachToNextRungCommand;
import frc.commands.RetractClimberFullCommand;
import frc.commands.RetractClimberMinimumCommand;
import frc.robot.subsystems.Elevator;
import frc.robot.subsystems.SecondaryArm;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
  
  private static RobotContainer m_robotContainer = new RobotContainer();
// The robot's subsystems
    public final SecondaryArm m_secondMechanism = new SecondaryArm();
    public final Elevator m_elevator = new Elevator();
// Joysticks
  private final JoystickButton[] consoleButtons;
  private final Joystick buttonConsole;

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    
    this.buttonConsole = new Joystick(3);
    this.consoleButtons = new JoystickButton[11];
    for(int i = 0; i < consoleButtons.length; i++) {
      consoleButtons[i] = new JoystickButton(buttonConsole, i);
    }

    // Smartdashboard Subsystems
    SmartDashboard.putData(m_secondMechanism);
    SmartDashboard.putData(m_elevator);
    configureButtonBindings();

  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
       
        
        // configure climb to fourth rung climb sequence 
        consoleButtons[2].whenPressed(
            new SequentialCommandGroup(
              new RetractClimberFullCommand(m_elevator),
              new InstantCommand(() -> m_secondMechanism.secondaryArmIn()),
              new ReachToNextRungCommand(m_elevator),
              new ParallelCommandGroup(
                new RetractClimberFullCommand(m_elevator),
                new InstantCommand(() -> m_secondMechanism.secondaryArmOut())
              ),
              new InstantCommand(() -> m_secondMechanism.secondaryArmIn()),
              new ReachToNextRungCommand(m_elevator),
              new RetractClimberMinimumCommand(m_elevator)
            )
        );

        //configure climb to third rung climb sequence 
        consoleButtons[11].whenPressed(
            new SequentialCommandGroup(
              new RetractClimberFullCommand(m_elevator),
              new InstantCommand(() -> m_secondMechanism.secondaryArmOut()),
              new ReachToNextRungCommand(m_elevator),
              new ParallelCommandGroup(
                new RetractClimberMinimumCommand(m_elevator),
                new InstantCommand(() -> m_secondMechanism.secondaryArmIn()))));

        //configure climb to 2 rung climb sequence 
        consoleButtons[10].whenPressed(
          new RetractClimberMinimumCommand(m_elevator));

        //configure raise elevator before starting climb
        consoleButtons[9].whenPressed(  
          new ExtendClimberToMidRungCommand(m_elevator));
        
  }

}

