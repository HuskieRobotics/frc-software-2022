

// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.commands.ExtendClimberToHeight;
import frc.robot.Constants.ElevatorConstants;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import edu.wpi.first.networktables.NetworkTableEntry;
// import static frc.robot.Constants.ElevatorConstants;
import static frc.robot.Constants.*;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.Subsystem;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.networktables.NetworkTableEntry;

import java.util.Map;

import static frc.robot.Constants.*;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.Subsystem;



/**
 *
 */
public class Elevator extends SubsystemBase {
    private NetworkTableEntry leftElevatorMotorEncoderNT;
    private NetworkTableEntry rightElevatorMotorEncoderNT;
    private NetworkTableEntry elevatorMotorPowerNT;
    private NetworkTableEntry elevatorDesiredHeight;
    private NetworkTableEntry enableElevatorDesiredHeight;
    private NetworkTableEntry useWarningNT; //used to create a warning on shuffle board to not interact with both of the widgets at the same time
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX leftElevatorMotor;
private WPI_TalonFX rightElevatorMotor;
private MotorControllerGroup elevatorMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
public Elevator() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftElevatorMotor = new WPI_TalonFX(ElevatorConstants.LEFT_ELEVATOR_MOTOR_CAN_ID);
 
 

    rightElevatorMotor = new WPI_TalonFX(ElevatorConstants.RIGHT_ELEVATOR_MOTOR_CAN_ID);
 
 

    elevatorMotors = new MotorControllerGroup(leftElevatorMotor, rightElevatorMotor);
        addChild("Elevator Motors",elevatorMotors);
 


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        this.leftElevatorMotorEncoderNT = Shuffleboard.getTab("Elevator")
            .add("Left Encoder", 0.0)
            .getEntry();
        this.rightElevatorMotorEncoderNT = Shuffleboard.getTab("Elevator")
            .add("Right Encoder", 0.0)
            .getEntry();

        this.elevatorMotorPowerNT = Shuffleboard.getTab("Elevator")
            .add("Elevator Motors", 0.0)
            .withWidget(BuiltInWidgets.kNumberSlider)
            .withProperties(Map.of("min", 0, "max", 1)) //FIX_ME figure max motor power should be 1
            .getEntry();

        this.elevatorDesiredHeight = Shuffleboard.getTab("Elevator")
            .add("Desired Height", 0)
            .withWidget(BuiltInWidgets.kNumberSlider)
            .withProperties(Map.of("min", 0, "max", 1))
            .getEntry();
        
        this.enableElevatorDesiredHeight = Shuffleboard.getTab("Elevator")
            .add("Enable elevatorDesiredHeight Widget", false)
            .withWidget(BuiltInWidgets.kToggleButton)
            .getEntry();
        
        this.useWarningNT = Shuffleboard.getTab("Elevator")
        .add("DO NOT USE MOTOR AND DESIRED HEIGHT WIDGET AT THE SAME TIME", false)
        .getEntry();
    
        
    }

    @Override
    public void periodic() {
    // This method will be called once per scheduler run

    this.leftElevatorMotorEncoderNT.setDouble(getLeftElevatorMotorHeight());
    this.rightElevatorMotorEncoderNT.setDouble(getRightElevatorMotorHeight());

    if (TUNING) {

        double motorPower = this.elevatorMotorPowerNT.getDouble(0.0);
        double k_height = this.elevatorDesiredHeight.getDouble(0.0);

        if (this.enableElevatorDesiredHeight.getBoolean(false)) {  //designed so they can't run at the same time to avoid breaking robot
            new ExtendClimberToHeight(this, k_height);
        } 
        else{
            leftElevatorMotor.set(motorPower);
            rightElevatorMotor.set(motorPower);
        }
    }      
        

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double getLeftElevatorMotorHeight(){
        return leftElevatorMotor.getSelectedSensorPosition();//FIX_ME should return the encoder value of the motors(the elevator height)
    }
    public double getRightElevatorMotorHeight(){
        return rightElevatorMotor.getSelectedSensorPosition();//FIX_ME should return the encoder value of the motors(the elevator height)
    }

    public void setElevatorMotorPower(double power){
        elevatorMotors.set(power);
        elevatorMotors.setInverted(false);//FIX_ME change to true if motors spin in the wrong direction

    }


}

